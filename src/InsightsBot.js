import React, { useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import Typography from "@material-ui/core/Typography";
import Button from "@material-ui/core/Button";
import CircularProgress from "@material-ui/core/CircularProgress";
import TextField from "@material-ui/core/TextField";
import Box from "@material-ui/core/Box";
import Grid from "@material-ui/core/Grid";

const useStyles = makeStyles((theme) => ({
  root: {
    backgroundColor: "black",
    color: "white",
    minHeight: "100vh",
    padding: theme.spacing(4),
    boxSizing: "border-box"
  },
  dragDrop: {
    border: "2px dashed white",
    padding: theme.spacing(2),
    textAlign: "center",
    cursor: "pointer",
    marginBottom: theme.spacing(4)
  },
  inputContainer: {
    display: "flex",
    justifyContent: "space-between",
    marginBottom: theme.spacing(4)
  },
  submitButton: {
    display: "flex",
    justifyContent: "center"
  },
  progress: {
    display: "flex",
    justifyContent: "center",
    marginTop: theme.spacing(2)
  },
  insights: {
    marginTop: theme.spacing(2)
  }
}));

const InsightsBot = () => {
  const classes = useStyles();
  const [fileDropped, setFileDropped] = useState(false);
  const [fileName, setFileName] = useState("");
  const [loading, setLoading] = useState(false);
  const [insights, setInsights] = useState([]);

  const handleFileDrop = (event) => {
    event.preventDefault();
    if (event.dataTransfer.items) {
      // Use DataTransferItemList interface to access the file(s)
      for (let i = 0; i < event.dataTransfer.items.length; i++) {
        // If dropped items aren't files, reject them
        if (event.dataTransfer.items[i].kind === "file") {
          const file = event.dataTransfer.items[i].getAsFile();
          setFileName(file.name);
          console.log("... file[" + i + "].name = " + file.name);
        }
      }
    }
    setFileDropped(true);
  };

  const handleDragOver = (event) => {
    event.preventDefault();
  };

  const handleSubmit = () => {
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      setInsights([
        "Revenue Growth: The total revenue generated by the store has been increasing over time, indicating a positive trend in sales.",
        "Average Revenue per Customer: The average revenue per customer varies across cohorts, ranging from $92.50 to $111.11. This could suggest differences in purchasing behavior or product preferences among different cohorts.",
        "Retention Rate: The retention rate ranges from 70% to 85%, indicating that a significant portion of customers from each cohort made repeat purchases. This suggests a level of customer satisfaction and loyalty.",
        "Churn Rate: The churn rate ranges from 15% to 30%, indicating the percentage of customers who did not make repeat purchases. A lower churn rate is desirable as it signifies higher customer retention.",
        "Cohort Size: The size of each cohort varies, which could indicate fluctuations in customer acquisition efforts or market conditions during different months.",
        "Seasonal Trends: By comparing the performance of different cohorts, it may be possible to identify any seasonal trends or patterns in customer behavior and adjust marketing strategies accordingly."
      ]);
    }, 5000);
  };

  return (
    <Box className={classes.root}>
      <Typography variant="h1">eCommerce Insights bot</Typography>
      <br />
      <Typography variant="h2">
        <br />
        Drop off a CSV/PDF and discover all insights
      </Typography>
      <br />
      <br />
      <br />
      {!fileDropped && (
        <Box
          className={classes.dragDrop}
          onDrop={handleFileDrop}
          onDragOver={handleDragOver}
        >
          <Typography variant="body1">Drag and drop your file here</Typography>
        </Box>
      )}{" "}
      {fileDropped && (
        <Typography variant="body1">Uploaded file: {fileName}</Typography>
      )}
      {fileDropped && !loading && (
        <>
          <Grid container spacing={2} className={classes.inputContainer}>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Insights to focus on"
                variant="outlined"
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Exclude these areas"
                variant="outlined"
              />
            </Grid>
          </Grid>
          {!loading && insights.length === 0 && (
            <Box className={classes.submitButton}>
              <Button
                variant="contained"
                color="primary"
                onClick={handleSubmit}
              >
                Submit
              </Button>
            </Box>
          )}
        </>
      )}
      {loading && (
        <Box className={classes.progress}>
          <CircularProgress />
        </Box>
      )}
      {insights.length > 0 && (
        <Box className={classes.insights}>
          {insights.map((insight, index) => (
            <Typography key={index} variant="body1">{`${
              index + 1
            }. ${insight}`}</Typography>
          ))}
        </Box>
      )}
    </Box>
  );
};

export default InsightsBot;
